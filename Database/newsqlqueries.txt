DROP PROCEDURE IF EXISTS sp_getUserId;
CREATE DELIMITER //

CREATE PROCEDURE sp_getUserId(IN in_email VARCHAR(50), OUT out_id INT(11))
BEGIN
SELECT ID FROM Users WHERE email = in_email AND facebook_uid = null INTO out_id;
END //

DROP PROCEDURE IF EXISTS sp_delUser;

DELIMITER //
CREATE PROCEDURE sp_delUser(IN in_email VARCHAR(50))
BEGIN
CALL sp_getUserId(in_email, @userid);
DELETE FROM Task USING Task, Board WHERE Task.Board_ID = Board.ID AND Board.Owner_ID = @userid;
DELETE FROM Board WHERE Board.Owner_ID = @userid;
DELETE FROM Users WHERE Id = @userid;
END //


CREATE DELIMITER //

CREATE PROCEDURE sp_updateUserInfo(IN in_userID INT(11), IN in_newName VARCHAR(50), 
IN in_newPassword VARCHAR(50), IN in_newBio VARCHAR(1000))
BEGIN
UPDATE Users SET Name = in_newName, Password = in_newPassword, Bio = in_newBio WHERE ID = in_userID;
END //

DROP PROCEDURE IF EXISTS add_user;
DELIMITER //

CREATE PROCEDURE sp_add_user(IN name varchar(50), 
IN password varchar(255), IN email varchar(50))
BEGIN
insert into Users(Name, Password, Email, Time_Created) 
values(name, password, email, current_timestamp());
END //

CREATE PROCEDURE sp_reHash_change_passw(IN in_newPassword varchar(255), IN in_userID INTEGER(11))
BEGIN
UPDATE Users SET Password = in_newPassword WHERE ID = in_userID;
END //

ALTER TABLE Users ADD Filepath VARCHAR(50);

DROP PROCEDURE IF EXISTS sp_updateUserInfo;
DELIMITER //
CREATE PROCEDURE sp_updateUserInfo(IN in_userID INT(11), IN in_newName VARCHAR(50), 
IN in_newPassword VARCHAR(50), IN in_newBio VARCHAR(1000), IN in_filepath VARCHAR(50))
BEGIN
UPDATE Users SET Name = in_newName, Password = in_newPassword, 
Bio = in_newBio, Filepath = in_filepath WHERE ID = in_userID;
END //

